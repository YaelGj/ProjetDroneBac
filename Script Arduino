-- Inclusion de bibliothèques de composants
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;

-- Définition de l'interface du composants
ENTITY byte_to_bcd IS 
   PORT(
		i7, i6, i5, i4, i3, i2, i1, i0 : IN std_logic;
		u3, u2, u1, u0 : OUT STD_LOGIC;
		d3, d2, d1, d0 : OUT STD_LOGIC;
		c3, c2, c1, c0 : OUT STD_LOGIC
	);
END byte_to_bcd;

 -- Définition de l'architecture du composant
 ARCHITECTURE arch OF byte_to_bcd IS
 
SIGNAL bcd : STD_LOGIC_VECTOR(11 downto 0);
SIGNAL input : STD_LOGIC_VECTOR(7 downto 0);

function to_bcd( bin : std_logic_vector(7 downto 0) ) return std_logic_vector is
	variable i : integer:=0;
	variable bcd : std_logic_vector(11 downto 0) := (others => '0');
	variable bint : std_logic_vector(7 downto 0) := bin;

begin
	for i in 0 to 7 loop  -- repeating 8 times.
		bcd(11 downto 1) := bcd(10 downto 0);  --shifting the bits.
		bcd(0) := bint(7);
		bint(7 downto 1) := bint(6 downto 0);
		bint(0) :='0';

		if(i < 7 and bcd(3 downto 0) > "0100") then --add 3 if BCD digit is greater than 4.
			bcd(3 downto 0) := bcd(3 downto 0) + "0011";
		end if;

		if(i < 7 and bcd(7 downto 4) > "0100") then --add 3 if BCD digit is greater than 4.
			bcd(7 downto 4) := bcd(7 downto 4) + "0011";
		end if;

		if(i < 7 and bcd(11 downto 8) > "0100") then  --add 3 if BCD digit is greater than 4.
			bcd(11 downto 8) := bcd(11 downto 8) + "0011";
		end if;

	end loop;
	return bcd;
end to_bcd;

BEGIN 
  input(7)<=i7;
  input(6)<=i6;
  input(5)<=i5;
  input(4)<=i4;
  input(3)<=i3;
  input(2)<=i2;
  input(1)<=i1;
  input(0)<=i0;
  bcd <= to_bcd(input);
  c3<=bcd(11);
  c2<=bcd(10);
  c1<=bcd(9);
  c0<=bcd(8);
  
  d3<=bcd(7);
  d2<=bcd(6);
  d1<=bcd(5);
  d0<=bcd(4);
  
  u3<=bcd(3);
  u2<=bcd(2);
  u1<=bcd(1);
  u0<=bcd(0);
  
END arch;
